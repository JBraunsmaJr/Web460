@model OrderModel

@using (Html.BeginForm(Model.IsReadOnly ? "ConfirmOrder" : "Index", "Order"))
{
    <div class="row">
        <div class="form-group col-md-6">
            <label asp-for="FirstName">First Name</label>
            <input asp-for="FirstName" class="form-control" readonly="@Model.IsReadOnly"/>
            @Html.ValidationMessageFor(x=>x.FirstName, null, htmlAttributes: new{@class="text-danger"})
        </div>
        <div class="form-group col-md-6">
            <label asp-for="LastName">Last Name</label>
            <input asp-for="LastName" class="form-control" readonly="@Model.IsReadOnly"/>
            @Html.ValidationMessageFor(x=>x.LastName, null, htmlAttributes: new{@class="text-danger"})
        </div>
    </div>
    
    <div class="form-group">
        <label asp-for="Street">Street</label>
        <input asp-for="Street" class="form-control" readonly="@Model.IsReadOnly"/>
        @Html.ValidationMessageFor(x=>x.Street, null, htmlAttributes: new{@class="text-danger"})
    </div>
    
    <div class="row">
        <div class="form-group col-md-6">
            <label asp-for="City">City</label>
            <input asp-for="City" class="form-control" readonly="@Model.IsReadOnly"/>
            @Html.ValidationMessageFor(x=>x.City, null, htmlAttributes: new{@class="text-danger"})
        </div>
        <div class="form-group col-md-6">
            <label asp-for="State">State</label>
            <input asp-for="State" class="form-control" readonly="@Model.IsReadOnly"/>
            @Html.ValidationMessageFor(x=>x.State, null, htmlAttributes: new{@class="text-danger"})
        </div>
    </div>
    
    <div class="form-group">
        <label asp-for="CardType">Card Type</label>
        <select class="form-control" id="CardType" name="CardType" readonly="@Model.IsReadOnly">
            @foreach (var item in Html.GetEnumSelectList<CardType>())
            {
                <option selected="@(item.Text.Equals(Model.CardType.ToString()))" value="@item.Value">@item.Text</option>
            }
        </select>
        @Html.ValidationMessageFor(x => x.CardType, null, htmlAttributes: new{@class="text-danger"})
    </div>
    
    <div class="form-group">
        <label asp-for="CreditCardNumber">Credit Card Number</label>
        <input asp-for="CreditCardNumber" class="form-control" readonly="@Model.IsReadOnly"/>
        @Html.ValidationMessageFor(x=>x.CreditCardNumber, null, htmlAttributes: new{@class="text-danger"})
    </div>
    
    <div class="form-group">
        <label asp-for="PhoneNumber">Phone Number</label>
        <input asp-for="PhoneNumber" class="form-control" readonly="@Model.IsReadOnly"/>
        @Html.ValidationMessageFor(x=>x.PhoneNumber, null, htmlAttributes: new{@class="text-danger"})
    </div>
    
    <div class="form-group mt-2">
        <button class="btn btn-@(Model.IsReadOnly ? "success" : "primary")">@(Model.IsReadOnly ? "Confirm" : "Submit")</button>
    </div>
}